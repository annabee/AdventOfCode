test_input = '9384274494683632359351641411374573466273164687337536769779487433749179185568461296' \
        '2333536119926727537781269352767698854247195532916161361722988831566262541512788525' \
        '8239794969787446217853629534182213737756332281552759226779121311541863536317487613' \
        '2196234374887626324931371241841242873783493835919238421879116421481543826222278152' \
        '2385767621325777632146425695452986689352169114934622296297869782735481471713843215' \
        '2595295919637772849363287261829118325688841777949512483782818729824478617587271329' \
        '9271766246696631257484453347125176233373232245382158656142179687576388951175953419' \
        '2868586732211385539122295765231231148716374879787758557774839218965683332823331371' \
        '7573974623426274425625414923384351725461398147635514748797585968593652716173764492' \
        '9119345127273149762325158784595946931447738173246311763677997888425452294562823751' \
        '1365152718747251435826237173243945873983712985233683865954267141487177353452376572' \
        '4971268589592143346894918223514669817439392828831398535576979948551174942355293599' \
        '2391624424575278333625476148888355716967628454862834463357834291788479677576561681' \
        '171516128495737923155533438413156639155128831349894646317546536886319328573512622325' \
        '78967211517161819554853494118493923391416643234932199287928734993281913591951895556' \
        '14566159891372218754835615994933429815956789618365624354362856737642139417589544895' \
        '82656271121429555455368545289416981624961261963953364918377483776322142975937971552' \
        '27164222493392632666555778758692766789825594711698827813197438138851427483385255269' \
        '56797134248365363484492731494158725221115227494481889931598141834118539945791478673' \
        '85867619467777654943169814287928966652552129439822741856512265955664872454951159255' \
        '61751313614271747177469822456654361759574275324414236443858972935693948338746636347' \
        '72242834778438896792212293449744416244484898537641114257981412581552466368449147112' \
        '22931548722647298953744242682551562166463942694715631497895981643174194294826868561' \
        '57858685132626261973127266539771138145974528121819651515591787769466318673259968891' \
        '28781492426887415848228318617488458178716816216979444723776886583681456986148614565' \
        '18138376989688166921187224726942589996534179549171859786241718727295379'


def reduce_pairs_with_range(input_data):
    res = 0
    input_data.append(input_data[0])
    for i in xrange(0,  len(input_data) - 1):
        res += compare_pair(input_data[i],  input_data[i+1])
    return res


def compare_pair(a,  b):
    if a == b:
        return int(a)
    else:
        return 0


def reduce_pairs_with_zip(input_data):
    input_data += input_data[0]

    pairs = zip(input_data[:-1],  input_data[1:])
    pairs = filter(lambda pair: pair[0] == pair[1],  pairs)
    pairs = [int(pair[0]) for pair in pairs]

    return sum(pairs)


print reduce_pairs_with_zip(test_input)

print reduce_pairs_with_range(list(test_input))
